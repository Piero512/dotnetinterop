// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for NetHost interop.
///
/// Regenerate bindings with `flutter pub run ffigen --config nethost.yaml`.
///
class NetHost {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NetHost(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NetHost.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Get the path to the hostfxr library
  ///
  /// Parameters:
  /// buffer
  /// Buffer that will be populated with the hostfxr path, including a null terminator.
  ///
  /// buffer_size
  /// [in] Size of buffer in char_t units.
  /// [out] Size of buffer used in char_t units. If the input value is too small
  /// or buffer is nullptr, this is populated with the minimum required size
  /// in char_t units for a buffer to hold the hostfxr path
  ///
  /// get_hostfxr_parameters
  /// Optional. Parameters that modify the behaviour for locating the hostfxr library.
  /// If nullptr, hostfxr is located using the enviroment variable or global registration
  ///
  /// Return value:
  /// 0 on success, otherwise failure
  /// 0x80008098 - buffer is too small (HostApiBufferTooSmall)
  ///
  /// Remarks:
  /// The full search for the hostfxr library is done on every call. To minimize the need
  /// to call this function multiple times, pass a large buffer (e.g. PATH_MAX).
  int get_hostfxr_path(
    ffi.Pointer<char_t> buffer,
    ffi.Pointer<ffi.Size> buffer_size,
    ffi.Pointer<get_hostfxr_parameters> parameters,
  ) {
    return _get_hostfxr_path(
      buffer,
      buffer_size,
      parameters,
    );
  }

  late final _get_hostfxr_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<char_t>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<get_hostfxr_parameters>)>>('get_hostfxr_path');
  late final _get_hostfxr_path = _get_hostfxr_pathPtr.asFunction<
      int Function(ffi.Pointer<char_t>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<get_hostfxr_parameters>)>();
}

/// Parameters for get_hostfxr_path
///
/// Fields:
/// size
/// Size of the struct. This is used for versioning.
///
/// assembly_path
/// Path to the compenent's assembly.
/// If specified, hostfxr is located as if the assembly_path is the apphost
///
/// dotnet_root
/// Path to directory containing the dotnet executable.
/// If specified, hostfxr is located as if an application is started using
/// 'dotnet app.dll', which means it will be searched for under the dotnet_root
/// path and the assembly_path is ignored.
class get_hostfxr_parameters extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<char_t> assembly_path;

  external ffi.Pointer<char_t> dotnet_root;
}

typedef char_t = ffi.WChar;
